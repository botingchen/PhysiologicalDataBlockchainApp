module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var Strategy = __webpack_require__(1);

/**
 * Expose `Strategy` directly from package.
 */
exports = module.exports = Strategy;

/**
 * Export constructors.
 */
exports.Strategy = Strategy;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Module dependencies.
 */
var passport = __webpack_require__(2),
    util = __webpack_require__(3),
    sigUtil = __webpack_require__(4);

/**
 * `Strategy` constructor.
 *
 * The web3 strategy works by having the user sign a message using web3 using
 * their ethereum address. We take the signed message and use `ecrecover` to
 * decode the address it was signed with. If the decoded address matches the
 * address they are trying to sign in with, we authorize the user.
 *
 * Applications must supply a `onAuth` callback which is passed the user's ETH
 * address, the message they were asked to sign, and the signed message. You
 * may optionally perform additional verification in the callback, and if the
 * user is valid then you call the calback which is passed to `onAuth` which
 * will log the user in. You must pass the user object to this callback, or
 * pass an `err` argument if the login should fail.
 *
 * Examples:
 * const onAuth = function (req, address, msg, signed, done) {
 *   User.findOne({ address }, function (err, user) {
 *     done(err, user);
 *   });
 * }
 * const web3Strategy = new Web3Strategy(onAuth);
 * passport.use(web3Strategy);
 *
 * @param {Object} options
 * @param {Function} onAuth
 * @api public
 */

var Strategy = function (_passport$Strategy) {
  _inherits(Strategy, _passport$Strategy);

  function Strategy(options, onAuth) {
    _classCallCheck(this, Strategy);

    if (typeof options == 'function') {
      onAuth = options;
      options = {};
    }
    if (!onAuth) {
      throw new TypeError('Web3Strategy requires an onAuth callback');
    }

    var _this = _possibleConstructorReturn(this, (Strategy.__proto__ || Object.getPrototypeOf(Strategy)).call(this));

    _this._onAuth = onAuth;
    _this.name = 'web3';
    return _this;
  }

  /**
   * Authenticate request based on the contents of a form submission.
   *
   * @param {Object} req
   * @api protected
   */


  _createClass(Strategy, [{
    key: 'authenticate',
    value: function authenticate(req) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var credentials = this.getCredentials(req);

      if (!credentials) {
        var err = {
          message: options.badRequestMessage || 'Missing credentials'
        };
        return this.fail(err, 400);
      }

      var address = credentials.address,
          msg = credentials.msg,
          signed = credentials.signed;


      var params = {
        data: msg,
        sig: signed
      };
      var recovered = sigUtil.recoverPersonalSignature(params);

      if (!recovered || recovered !== address) {
        var _err = {
          message: 'Invalid credentials (recovered address didnt match eth address)'
        };
        return this.fail(_err, 400);
      }

      var done = function done(err, user, info) {
        if (err) {
          return _this2.error(err);
        }
        if (!user) {
          return _this2.fail(info);
        }
        _this2.success(user, info);
      };

      try {
        var authParams = { msg: msg, signed: signed };

        this._onAuth(address, done, req, authParams);
      } catch (ex) {
        return this.error(ex);
      }
    }

    /**
     * Get the required auth params from request body, or fallback to query if
     * not provided in body, but provided in query
     * @param {Object} req
     * @return {Object}
     */

  }, {
    key: 'getCredentials',
    value: function getCredentials(req) {
      var has = function has(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      };
      var hasAll = function hasAll(obj, keys) {
        return obj && keys.every(function (k) {
          return has(obj, k);
        });
      };

      var body = req.body,
          query = req.query;

      var paramKeys = ['address', 'msg', 'signed'];

      if (hasAll(body, paramKeys)) {
        return body;
      } else if (hasAll(query, paramKeys)) {
        return query;
      }

      return null;
    }
  }]);

  return Strategy;
}(passport.Strategy);

/**
 * Expose `Strategy`.
 */


module.exports = Strategy;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("passport-strategy");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("eth-sig-util");

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,